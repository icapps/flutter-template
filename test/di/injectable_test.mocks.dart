// Mocks generated by Mockito 5.0.17 from annotations
// in flutter_template/test/di/injectable_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;
import 'dart:ui' as _i10;

import 'package:connectivity_plus/connectivity_plus.dart' as _i19;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i20;
import 'package:dio/dio.dart' as _i3;
import 'package:drift/drift.dart' as _i36;
import 'package:firebase_analytics/firebase_analytics.dart' as _i33;
import 'package:firebase_analytics_platform_interface/firebase_analytics_platform_interface.dart'
    as _i34;
import 'package:firebase_core/firebase_core.dart' as _i6;
import 'package:flutter/material.dart' as _i17;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i2;
import 'package:flutter_template/model/webservice/todo/todo.dart' as _i18;
import 'package:flutter_template/navigator/main_navigation.dart' as _i35;
import 'package:flutter_template/repository/debug/debug_repository.dart' as _i7;
import 'package:flutter_template/repository/locale/locale_repository.dart'
    as _i9;
import 'package:flutter_template/repository/login/login_repository.dart'
    as _i11;
import 'package:flutter_template/repository/refresh/refresh_repository.dart'
    as _i12;
import 'package:flutter_template/repository/secure_storage/auth/auth_storage.dart'
    as _i14;
import 'package:flutter_template/repository/secure_storage/secure_storage.dart'
    as _i13;
import 'package:flutter_template/repository/shared_prefs/local/local_storage.dart'
    as _i16;
import 'package:flutter_template/repository/todo/todo_repository.dart' as _i5;
import 'package:flutter_template/util/license.dart' as _i28;
import 'package:flutter_template/util/locale/localization.dart' as _i26;
import 'package:flutter_template/util/locale/localization_delegate.dart' as _i4;
import 'package:flutter_template/viewmodel/debug/debug_platform_selector_viewmodel.dart'
    as _i23;
import 'package:flutter_template/viewmodel/debug/debug_viewmodel.dart' as _i24;
import 'package:flutter_template/viewmodel/global/global_viewmodel.dart'
    as _i25;
import 'package:flutter_template/viewmodel/license/license_viewmodel.dart'
    as _i27;
import 'package:flutter_template/viewmodel/login/login_viewmodel.dart' as _i29;
import 'package:flutter_template/viewmodel/splash/splash_viewmodel.dart'
    as _i30;
import 'package:flutter_template/viewmodel/todo/todo_add/todo_add_viewmodel.dart'
    as _i31;
import 'package:flutter_template/viewmodel/todo/todo_list/todo_list_viewmodel.dart'
    as _i32;
import 'package:flutter_template/webservice/todo/todo_service.dart' as _i22;
import 'package:icapps_architecture/icapps_architecture.dart' as _i15;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i21;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeIOSOptions_0 extends _i1.Fake implements _i2.IOSOptions {}

class _FakeAndroidOptions_1 extends _i1.Fake implements _i2.AndroidOptions {}

class _FakeLinuxOptions_2 extends _i1.Fake implements _i2.LinuxOptions {}

class _FakeWindowsOptions_3 extends _i1.Fake implements _i2.WindowsOptions {}

class _FakeWebOptions_4 extends _i1.Fake implements _i2.WebOptions {}

class _FakeMacOsOptions_5 extends _i1.Fake implements _i2.MacOsOptions {}

class _FakeBaseOptions_6 extends _i1.Fake implements _i3.BaseOptions {}

class _FakeHttpClientAdapter_7 extends _i1.Fake
    implements _i3.HttpClientAdapter {}

class _FakeTransformer_8 extends _i1.Fake implements _i3.Transformer {}

class _FakeInterceptors_9 extends _i1.Fake implements _i3.Interceptors {}

class _FakeResponse_10<T> extends _i1.Fake implements _i3.Response<T> {}

class _FakeLocalizationDelegate_11 extends _i1.Fake
    implements _i4.LocalizationDelegate {}

class _FakeTodoRepository_12 extends _i1.Fake implements _i5.TodoRepository {}

class _FakeFirebaseApp_13 extends _i1.Fake implements _i6.FirebaseApp {}

/// A class which mocks [DebugRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDebugRepository extends _i1.Mock implements _i7.DebugRepository {
  MockDebugRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> saveSlowAnimations({bool? enabled}) => (super.noSuchMethod(
      Invocation.method(#saveSlowAnimations, [], {#enabled: enabled}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  bool isSlowAnimationsEnabled() =>
      (super.noSuchMethod(Invocation.method(#isSlowAnimationsEnabled, []),
          returnValue: false) as bool);
  @override
  _i8.Future<void> saveSelectedPlatform(String? selectedPlatform) =>
      (super.noSuchMethod(
          Invocation.method(#saveSelectedPlatform, [selectedPlatform]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [LocaleRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocaleRepository extends _i1.Mock implements _i9.LocaleRepository {
  MockLocaleRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> setCustomLocale(_i10.Locale? locale) =>
      (super.noSuchMethod(Invocation.method(#setCustomLocale, [locale]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [LoginRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRepository extends _i1.Mock implements _i11.LoginRepository {
  MockLoginRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<bool> isLoggedIn() =>
      (super.noSuchMethod(Invocation.method(#isLoggedIn, []),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<void> login({String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(#login, [], {#email: email, #password: password}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [RefreshRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRefreshRepository extends _i1.Mock implements _i12.RefreshRepository {
  MockRefreshRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set logoutCallback(_i10.VoidCallback? _logoutCallback) =>
      super.noSuchMethod(Invocation.setter(#logoutCallback, _logoutCallback),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> refresh(_i3.DioError? err) =>
      (super.noSuchMethod(Invocation.method(#refresh, [err]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void resetFailure() =>
      super.noSuchMethod(Invocation.method(#resetFailure, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [SecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureStorage extends _i1.Mock implements _i13.SecureStorage {
  MockSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> deleteAll() =>
      (super.noSuchMethod(Invocation.method(#deleteAll, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> write({String? key, String? value}) => (super.noSuchMethod(
      Invocation.method(#write, [], {#key: key, #value: value}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<String?> read({String? key}) =>
      (super.noSuchMethod(Invocation.method(#read, [], {#key: key}),
          returnValue: Future<String?>.value()) as _i8.Future<String?>);
  @override
  _i8.Future<void> delete({String? key}) =>
      (super.noSuchMethod(Invocation.method(#delete, [], {#key: key}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<bool> containsKey({String? key}) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [], {#key: key}),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<String?> getValue({String? key}) =>
      (super.noSuchMethod(Invocation.method(#getValue, [], {#key: key}),
          returnValue: Future<String?>.value()) as _i8.Future<String?>);
  @override
  _i8.Future<void> setValue({String? key, String? value}) =>
      (super.noSuchMethod(
          Invocation.method(#setValue, [], {#key: key, #value: value}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<bool> hasValue({String? key}) =>
      (super.noSuchMethod(Invocation.method(#hasValue, [], {#key: key}),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<void> removeValue({String? key}) =>
      (super.noSuchMethod(Invocation.method(#removeValue, [], {#key: key}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [AuthStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthStorage extends _i1.Mock implements _i14.AuthStorage {
  MockAuthStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<String?> getRefreshToken() =>
      (super.noSuchMethod(Invocation.method(#getRefreshToken, []),
          returnValue: Future<String?>.value()) as _i8.Future<String?>);
  @override
  _i8.Future<String?> getAccessToken() =>
      (super.noSuchMethod(Invocation.method(#getAccessToken, []),
          returnValue: Future<String?>.value()) as _i8.Future<String?>);
  @override
  _i8.Future<void> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> saveUserCredentials(
          {String? accessToken, String? refreshToken}) =>
      (super.noSuchMethod(
          Invocation.method(#saveUserCredentials, [],
              {#accessToken: accessToken, #refreshToken: refreshToken}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<bool> hasLoggedInUser() =>
      (super.noSuchMethod(Invocation.method(#hasLoggedInUser, []),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
}

/// A class which mocks [SharedPreferenceStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferenceStorage extends _i1.Mock
    implements _i15.SharedPreferenceStorage {
  MockSharedPreferenceStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> saveString({String? key, String? value}) =>
      (super.noSuchMethod(
          Invocation.method(#saveString, [], {#key: key, #value: value}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> saveBoolean({String? key, bool? value}) =>
      (super.noSuchMethod(
          Invocation.method(#saveBoolean, [], {#key: key, #value: value}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> saveInt({String? key, int? value}) => (super.noSuchMethod(
      Invocation.method(#saveInt, [], {#key: key, #value: value}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> saveDouble({String? key, double? value}) =>
      (super.noSuchMethod(
          Invocation.method(#saveDouble, [], {#key: key, #value: value}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  String? getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key])) as String?);
  @override
  bool? getBoolean(String? key) =>
      (super.noSuchMethod(Invocation.method(#getBoolean, [key])) as bool?);
  @override
  int? getInt(String? key) =>
      (super.noSuchMethod(Invocation.method(#getInt, [key])) as int?);
  @override
  double? getDouble(String? key) =>
      (super.noSuchMethod(Invocation.method(#getDouble, [key])) as double?);
  @override
  _i8.Future<void> deleteKey(String? key) =>
      (super.noSuchMethod(Invocation.method(#deleteKey, [key]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  bool containsKey(String? key) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [key]),
          returnValue: false) as bool);
  @override
  _i8.Future<String?> getValue({String? key}) =>
      (super.noSuchMethod(Invocation.method(#getValue, [], {#key: key}),
          returnValue: Future<String?>.value()) as _i8.Future<String?>);
  @override
  _i8.Future<void> setValue({String? key, String? value}) =>
      (super.noSuchMethod(
          Invocation.method(#setValue, [], {#key: key, #value: value}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<bool> hasValue({String? key}) =>
      (super.noSuchMethod(Invocation.method(#hasValue, [], {#key: key}),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<void> removeValue({String? key}) =>
      (super.noSuchMethod(Invocation.method(#removeValue, [], {#key: key}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [LocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorage extends _i1.Mock implements _i16.LocalStorage {
  MockLocalStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> checkForNewInstallation() =>
      (super.noSuchMethod(Invocation.method(#checkForNewInstallation, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i17.ThemeMode getThemeMode() =>
      (super.noSuchMethod(Invocation.method(#getThemeMode, []),
          returnValue: _i17.ThemeMode.system) as _i17.ThemeMode);
  @override
  _i8.Future<void> updateThemeMode(_i17.ThemeMode? themeMode) =>
      (super.noSuchMethod(Invocation.method(#updateThemeMode, [themeMode]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [TodoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoRepository extends _i1.Mock implements _i5.TodoRepository {
  MockTodoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Stream<List<_i18.Todo>> getTodos() =>
      (super.noSuchMethod(Invocation.method(#getTodos, []),
              returnValue: Stream<List<_i18.Todo>>.empty())
          as _i8.Stream<List<_i18.Todo>>);
  @override
  _i8.Future<List<_i18.Todo>> fetchTodos() =>
      (super.noSuchMethod(Invocation.method(#fetchTodos, []),
              returnValue: Future<List<_i18.Todo>>.value(<_i18.Todo>[]))
          as _i8.Future<List<_i18.Todo>>);
  @override
  _i8.Future<void> saveTodo(String? todo) =>
      (super.noSuchMethod(Invocation.method(#saveTodo, [todo]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setTodoState({int? id, bool? value}) => (super.noSuchMethod(
      Invocation.method(#setTodoState, [], {#id: id, #value: value}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i19.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Stream<_i20.ConnectivityResult> get onConnectivityChanged =>
      (super.noSuchMethod(Invocation.getter(#onConnectivityChanged),
              returnValue: Stream<_i20.ConnectivityResult>.empty())
          as _i8.Stream<_i20.ConnectivityResult>);
  @override
  _i8.Future<_i20.ConnectivityResult> checkConnectivity() =>
      (super.noSuchMethod(Invocation.method(#checkConnectivity, []),
              returnValue: Future<_i20.ConnectivityResult>.value(
                  _i20.ConnectivityResult.bluetooth))
          as _i8.Future<_i20.ConnectivityResult>);
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i2.FlutterSecureStorage {
  MockFlutterSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IOSOptions get iOptions =>
      (super.noSuchMethod(Invocation.getter(#iOptions),
          returnValue: _FakeIOSOptions_0()) as _i2.IOSOptions);
  @override
  _i2.AndroidOptions get aOptions =>
      (super.noSuchMethod(Invocation.getter(#aOptions),
          returnValue: _FakeAndroidOptions_1()) as _i2.AndroidOptions);
  @override
  _i2.LinuxOptions get lOptions =>
      (super.noSuchMethod(Invocation.getter(#lOptions),
          returnValue: _FakeLinuxOptions_2()) as _i2.LinuxOptions);
  @override
  _i2.WindowsOptions get wOptions =>
      (super.noSuchMethod(Invocation.getter(#wOptions),
          returnValue: _FakeWindowsOptions_3()) as _i2.WindowsOptions);
  @override
  _i2.WebOptions get webOptions =>
      (super.noSuchMethod(Invocation.getter(#webOptions),
          returnValue: _FakeWebOptions_4()) as _i2.WebOptions);
  @override
  _i2.MacOsOptions get mOptions =>
      (super.noSuchMethod(Invocation.getter(#mOptions),
          returnValue: _FakeMacOsOptions_5()) as _i2.MacOsOptions);
  @override
  _i8.Future<void> write(
          {String? key,
          String? value,
          _i2.IOSOptions? iOptions,
          _i2.AndroidOptions? aOptions,
          _i2.LinuxOptions? lOptions,
          _i2.WebOptions? webOptions,
          _i2.MacOsOptions? mOptions,
          _i2.WindowsOptions? wOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#write, [], {
            #key: key,
            #value: value,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<String?> read(
          {String? key,
          _i2.IOSOptions? iOptions,
          _i2.AndroidOptions? aOptions,
          _i2.LinuxOptions? lOptions,
          _i2.WebOptions? webOptions,
          _i2.MacOsOptions? mOptions,
          _i2.WindowsOptions? wOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#read, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions
          }),
          returnValue: Future<String?>.value()) as _i8.Future<String?>);
  @override
  _i8.Future<bool> containsKey(
          {String? key,
          _i2.IOSOptions? iOptions,
          _i2.AndroidOptions? aOptions,
          _i2.LinuxOptions? lOptions,
          _i2.WebOptions? webOptions,
          _i2.MacOsOptions? mOptions,
          _i2.WindowsOptions? wOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#containsKey, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions
          }),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<void> delete(
          {String? key,
          _i2.IOSOptions? iOptions,
          _i2.AndroidOptions? aOptions,
          _i2.LinuxOptions? lOptions,
          _i2.WebOptions? webOptions,
          _i2.MacOsOptions? mOptions,
          _i2.WindowsOptions? wOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<Map<String, String>> readAll(
          {_i2.IOSOptions? iOptions,
          _i2.AndroidOptions? aOptions,
          _i2.LinuxOptions? lOptions,
          _i2.WebOptions? webOptions,
          _i2.MacOsOptions? mOptions,
          _i2.WindowsOptions? wOptions}) =>
      (super.noSuchMethod(
              Invocation.method(#readAll, [], {
                #iOptions: iOptions,
                #aOptions: aOptions,
                #lOptions: lOptions,
                #webOptions: webOptions,
                #mOptions: mOptions,
                #wOptions: wOptions
              }),
              returnValue:
                  Future<Map<String, String>>.value(<String, String>{}))
          as _i8.Future<Map<String, String>>);
  @override
  _i8.Future<void> deleteAll(
          {_i2.IOSOptions? iOptions,
          _i2.AndroidOptions? aOptions,
          _i2.LinuxOptions? lOptions,
          _i2.WebOptions? webOptions,
          _i2.MacOsOptions? mOptions,
          _i2.WindowsOptions? wOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#deleteAll, [], {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i21.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(Invocation.method(#getKeys, []),
      returnValue: <String>{}) as Set<String>);
  @override
  Object? get(String? key) =>
      (super.noSuchMethod(Invocation.method(#get, [key])) as Object?);
  @override
  bool? getBool(String? key) =>
      (super.noSuchMethod(Invocation.method(#getBool, [key])) as bool?);
  @override
  int? getInt(String? key) =>
      (super.noSuchMethod(Invocation.method(#getInt, [key])) as int?);
  @override
  double? getDouble(String? key) =>
      (super.noSuchMethod(Invocation.method(#getDouble, [key])) as double?);
  @override
  String? getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key])) as String?);
  @override
  bool containsKey(String? key) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [key]),
          returnValue: false) as bool);
  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(#getStringList, [key]))
          as List<String>?);
  @override
  _i8.Future<bool> setBool(String? key, bool? value) =>
      (super.noSuchMethod(Invocation.method(#setBool, [key, value]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<bool> setInt(String? key, int? value) =>
      (super.noSuchMethod(Invocation.method(#setInt, [key, value]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<bool> setDouble(String? key, double? value) =>
      (super.noSuchMethod(Invocation.method(#setDouble, [key, value]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<bool> setString(String? key, String? value) =>
      (super.noSuchMethod(Invocation.method(#setString, [key, value]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<bool> setStringList(String? key, List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setStringList, [key, value]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<bool> remove(String? key) =>
      (super.noSuchMethod(Invocation.method(#remove, [key]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<bool> commit() =>
      (super.noSuchMethod(Invocation.method(#commit, []),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<bool> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<void> reload() =>
      (super.noSuchMethod(Invocation.method(#reload, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i3.Dio {
  MockDio() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.BaseOptions get options =>
      (super.noSuchMethod(Invocation.getter(#options),
          returnValue: _FakeBaseOptions_6()) as _i3.BaseOptions);
  @override
  set options(_i3.BaseOptions? _options) =>
      super.noSuchMethod(Invocation.setter(#options, _options),
          returnValueForMissingStub: null);
  @override
  _i3.HttpClientAdapter get httpClientAdapter =>
      (super.noSuchMethod(Invocation.getter(#httpClientAdapter),
          returnValue: _FakeHttpClientAdapter_7()) as _i3.HttpClientAdapter);
  @override
  set httpClientAdapter(_i3.HttpClientAdapter? _httpClientAdapter) => super
      .noSuchMethod(Invocation.setter(#httpClientAdapter, _httpClientAdapter),
          returnValueForMissingStub: null);
  @override
  _i3.Transformer get transformer =>
      (super.noSuchMethod(Invocation.getter(#transformer),
          returnValue: _FakeTransformer_8()) as _i3.Transformer);
  @override
  set transformer(_i3.Transformer? _transformer) =>
      super.noSuchMethod(Invocation.setter(#transformer, _transformer),
          returnValueForMissingStub: null);
  @override
  _i3.Interceptors get interceptors =>
      (super.noSuchMethod(Invocation.getter(#interceptors),
          returnValue: _FakeInterceptors_9()) as _i3.Interceptors);
  @override
  void close({bool? force = false}) =>
      super.noSuchMethod(Invocation.method(#close, [], {#force: force}),
          returnValueForMissingStub: null);
  @override
  _i8.Future<_i3.Response<T>> get<T>(String? path,
          {Map<String, dynamic>? queryParameters,
          _i3.Options? options,
          _i3.CancelToken? cancelToken,
          _i3.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#get, [
                path
              ], {
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i3.Response<T>>.value(_FakeResponse_10<T>()))
          as _i8.Future<_i3.Response<T>>);
  @override
  _i8.Future<_i3.Response<T>> getUri<T>(Uri? uri,
          {_i3.Options? options,
          _i3.CancelToken? cancelToken,
          _i3.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#getUri, [
                uri
              ], {
                #options: options,
                #cancelToken: cancelToken,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i3.Response<T>>.value(_FakeResponse_10<T>()))
          as _i8.Future<_i3.Response<T>>);
  @override
  _i8.Future<_i3.Response<T>> post<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i3.Options? options,
          _i3.CancelToken? cancelToken,
          _i3.ProgressCallback? onSendProgress,
          _i3.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i3.Response<T>>.value(_FakeResponse_10<T>()))
          as _i8.Future<_i3.Response<T>>);
  @override
  _i8.Future<_i3.Response<T>> postUri<T>(Uri? uri,
          {dynamic data,
          _i3.Options? options,
          _i3.CancelToken? cancelToken,
          _i3.ProgressCallback? onSendProgress,
          _i3.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#postUri, [
                uri
              ], {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i3.Response<T>>.value(_FakeResponse_10<T>()))
          as _i8.Future<_i3.Response<T>>);
  @override
  _i8.Future<_i3.Response<T>> put<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i3.Options? options,
          _i3.CancelToken? cancelToken,
          _i3.ProgressCallback? onSendProgress,
          _i3.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i3.Response<T>>.value(_FakeResponse_10<T>()))
          as _i8.Future<_i3.Response<T>>);
  @override
  _i8.Future<_i3.Response<T>> putUri<T>(Uri? uri,
          {dynamic data,
          _i3.Options? options,
          _i3.CancelToken? cancelToken,
          _i3.ProgressCallback? onSendProgress,
          _i3.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#putUri, [
                uri
              ], {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i3.Response<T>>.value(_FakeResponse_10<T>()))
          as _i8.Future<_i3.Response<T>>);
  @override
  _i8.Future<_i3.Response<T>> head<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i3.Options? options,
          _i3.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#head, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken
              }),
              returnValue: Future<_i3.Response<T>>.value(_FakeResponse_10<T>()))
          as _i8.Future<_i3.Response<T>>);
  @override
  _i8.Future<_i3.Response<T>> headUri<T>(Uri? uri,
          {dynamic data, _i3.Options? options, _i3.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#headUri, [uri],
                  {#data: data, #options: options, #cancelToken: cancelToken}),
              returnValue: Future<_i3.Response<T>>.value(_FakeResponse_10<T>()))
          as _i8.Future<_i3.Response<T>>);
  @override
  _i8.Future<_i3.Response<T>> delete<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i3.Options? options,
          _i3.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken
              }),
              returnValue: Future<_i3.Response<T>>.value(_FakeResponse_10<T>()))
          as _i8.Future<_i3.Response<T>>);
  @override
  _i8.Future<_i3.Response<T>> deleteUri<T>(Uri? uri,
          {dynamic data, _i3.Options? options, _i3.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#deleteUri, [uri],
                  {#data: data, #options: options, #cancelToken: cancelToken}),
              returnValue: Future<_i3.Response<T>>.value(_FakeResponse_10<T>()))
          as _i8.Future<_i3.Response<T>>);
  @override
  _i8.Future<_i3.Response<T>> patch<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i3.Options? options,
          _i3.CancelToken? cancelToken,
          _i3.ProgressCallback? onSendProgress,
          _i3.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i3.Response<T>>.value(_FakeResponse_10<T>()))
          as _i8.Future<_i3.Response<T>>);
  @override
  _i8.Future<_i3.Response<T>> patchUri<T>(Uri? uri,
          {dynamic data,
          _i3.Options? options,
          _i3.CancelToken? cancelToken,
          _i3.ProgressCallback? onSendProgress,
          _i3.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#patchUri, [
                uri
              ], {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i3.Response<T>>.value(_FakeResponse_10<T>()))
          as _i8.Future<_i3.Response<T>>);
  @override
  void lock() => super.noSuchMethod(Invocation.method(#lock, []),
      returnValueForMissingStub: null);
  @override
  void unlock() => super.noSuchMethod(Invocation.method(#unlock, []),
      returnValueForMissingStub: null);
  @override
  void clear() => super.noSuchMethod(Invocation.method(#clear, []),
      returnValueForMissingStub: null);
  @override
  _i8.Future<_i3.Response<dynamic>> download(String? urlPath, dynamic savePath,
          {_i3.ProgressCallback? onReceiveProgress,
          Map<String, dynamic>? queryParameters,
          _i3.CancelToken? cancelToken,
          bool? deleteOnError = true,
          String? lengthHeader = r'content-length',
          dynamic data,
          _i3.Options? options}) =>
      (super.noSuchMethod(
              Invocation.method(#download, [
                urlPath,
                savePath
              ], {
                #onReceiveProgress: onReceiveProgress,
                #queryParameters: queryParameters,
                #cancelToken: cancelToken,
                #deleteOnError: deleteOnError,
                #lengthHeader: lengthHeader,
                #data: data,
                #options: options
              }),
              returnValue: Future<_i3.Response<dynamic>>.value(
                  _FakeResponse_10<dynamic>()))
          as _i8.Future<_i3.Response<dynamic>>);
  @override
  _i8.Future<_i3.Response<dynamic>> downloadUri(Uri? uri, dynamic savePath,
          {_i3.ProgressCallback? onReceiveProgress,
          _i3.CancelToken? cancelToken,
          bool? deleteOnError = true,
          String? lengthHeader = r'content-length',
          dynamic data,
          _i3.Options? options}) =>
      (super.noSuchMethod(
              Invocation.method(#downloadUri, [
                uri,
                savePath
              ], {
                #onReceiveProgress: onReceiveProgress,
                #cancelToken: cancelToken,
                #deleteOnError: deleteOnError,
                #lengthHeader: lengthHeader,
                #data: data,
                #options: options
              }),
              returnValue: Future<_i3.Response<dynamic>>.value(
                  _FakeResponse_10<dynamic>()))
          as _i8.Future<_i3.Response<dynamic>>);
  @override
  _i8.Future<_i3.Response<T>> request<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i3.CancelToken? cancelToken,
          _i3.Options? options,
          _i3.ProgressCallback? onSendProgress,
          _i3.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#request, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #cancelToken: cancelToken,
                #options: options,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i3.Response<T>>.value(_FakeResponse_10<T>()))
          as _i8.Future<_i3.Response<T>>);
  @override
  _i8.Future<_i3.Response<T>> requestUri<T>(Uri? uri,
          {dynamic data,
          _i3.CancelToken? cancelToken,
          _i3.Options? options,
          _i3.ProgressCallback? onSendProgress,
          _i3.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#requestUri, [
                uri
              ], {
                #data: data,
                #cancelToken: cancelToken,
                #options: options,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i3.Response<T>>.value(_FakeResponse_10<T>()))
          as _i8.Future<_i3.Response<T>>);
  @override
  _i8.Future<_i3.Response<T>> fetch<T>(_i3.RequestOptions? requestOptions) =>
      (super.noSuchMethod(Invocation.method(#fetch, [requestOptions]),
              returnValue: Future<_i3.Response<T>>.value(_FakeResponse_10<T>()))
          as _i8.Future<_i3.Response<T>>);
}

/// A class which mocks [TodoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoService extends _i1.Mock implements _i22.TodoService {
  MockTodoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i18.Todo>> getTodos() =>
      (super.noSuchMethod(Invocation.method(#getTodos, []),
              returnValue: Future<List<_i18.Todo>>.value(<_i18.Todo>[]))
          as _i8.Future<List<_i18.Todo>>);
}

/// A class which mocks [DebugPlatformSelectorViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockDebugPlatformSelectorViewModel extends _i1.Mock
    implements _i23.DebugPlatformSelectorViewModel {
  MockDebugPlatformSelectorViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get disposed =>
      (super.noSuchMethod(Invocation.getter(#disposed), returnValue: false)
          as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i8.Future<void> init(_i23.DebugPlatformSelectorNavigator? navigator) =>
      (super.noSuchMethod(Invocation.method(#init, [navigator]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void onBackClicked() =>
      super.noSuchMethod(Invocation.method(#onBackClicked, []),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void addListener(_i10.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void registerDispose(_i15.DisposeAware? toDispose) =>
      super.noSuchMethod(Invocation.method(#registerDispose, [toDispose]),
          returnValueForMissingStub: null);
  @override
  void registerDisposeStream<T>(_i8.StreamSubscription<T>? subscription) =>
      super.noSuchMethod(
          Invocation.method(#registerDisposeStream, [subscription]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [DebugViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockDebugViewModel extends _i1.Mock implements _i24.DebugViewModel {
  MockDebugViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get slowAnimationsEnabled =>
      (super.noSuchMethod(Invocation.getter(#slowAnimationsEnabled),
          returnValue: false) as bool);
  @override
  set slowAnimationsEnabled(bool? _slowAnimationsEnabled) => super.noSuchMethod(
      Invocation.setter(#slowAnimationsEnabled, _slowAnimationsEnabled),
      returnValueForMissingStub: null);
  @override
  bool get disposed =>
      (super.noSuchMethod(Invocation.getter(#disposed), returnValue: false)
          as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i8.Future<void> init(_i24.DebugNavigator? navigator) =>
      (super.noSuchMethod(Invocation.method(#init, [navigator]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> onSlowAnimationsChanged(bool? enabled) => (super
      .noSuchMethod(Invocation.method(#onSlowAnimationsChanged, [enabled]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void onTargetPlatformClicked() =>
      super.noSuchMethod(Invocation.method(#onTargetPlatformClicked, []),
          returnValueForMissingStub: null);
  @override
  void onThemeModeClicked() =>
      super.noSuchMethod(Invocation.method(#onThemeModeClicked, []),
          returnValueForMissingStub: null);
  @override
  void onSelectLanguageClicked() =>
      super.noSuchMethod(Invocation.method(#onSelectLanguageClicked, []),
          returnValueForMissingStub: null);
  @override
  void onLicensesClicked() =>
      super.noSuchMethod(Invocation.method(#onLicensesClicked, []),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void addListener(_i10.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void registerDispose(_i15.DisposeAware? toDispose) =>
      super.noSuchMethod(Invocation.method(#registerDispose, [toDispose]),
          returnValueForMissingStub: null);
  @override
  void registerDisposeStream<T>(_i8.StreamSubscription<T>? subscription) =>
      super.noSuchMethod(
          Invocation.method(#registerDisposeStream, [subscription]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [GlobalViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockGlobalViewModel extends _i1.Mock implements _i25.GlobalViewModel {
  MockGlobalViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.ThemeMode get themeMode =>
      (super.noSuchMethod(Invocation.getter(#themeMode),
          returnValue: _i17.ThemeMode.system) as _i17.ThemeMode);
  @override
  _i4.LocalizationDelegate get localeDelegate => (super.noSuchMethod(
      Invocation.getter(#localeDelegate),
      returnValue: _FakeLocalizationDelegate_11()) as _i4.LocalizationDelegate);
  @override
  bool get showsTranslationKeys =>
      (super.noSuchMethod(Invocation.getter(#showsTranslationKeys),
          returnValue: false) as bool);
  @override
  bool get disposed =>
      (super.noSuchMethod(Invocation.getter(#disposed), returnValue: false)
          as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i8.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> onSwitchToDutch() =>
      (super.noSuchMethod(Invocation.method(#onSwitchToDutch, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> onSwitchToEnglish() =>
      (super.noSuchMethod(Invocation.method(#onSwitchToEnglish, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> onSwitchToSystemLanguage() =>
      (super.noSuchMethod(Invocation.method(#onSwitchToSystemLanguage, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setSelectedPlatformToAndroid() =>
      (super.noSuchMethod(Invocation.method(#setSelectedPlatformToAndroid, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setSelectedPlatformToIOS() =>
      (super.noSuchMethod(Invocation.method(#setSelectedPlatformToIOS, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setSelectedPlatformToDefault() =>
      (super.noSuchMethod(Invocation.method(#setSelectedPlatformToDefault, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> updateThemeMode(_i17.ThemeMode? themeMode) =>
      (super.noSuchMethod(Invocation.method(#updateThemeMode, [themeMode]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  String getCurrentPlatform() =>
      (super.noSuchMethod(Invocation.method(#getCurrentPlatform, []),
          returnValue: '') as String);
  @override
  String getAppearanceValue(_i26.Localization? localization) => (super
      .noSuchMethod(Invocation.method(#getAppearanceValue, [localization]),
          returnValue: '') as String);
  @override
  String getCurrentLanguage() =>
      (super.noSuchMethod(Invocation.method(#getCurrentLanguage, []),
          returnValue: '') as String);
  @override
  bool isLanguageSelected(String? languageCode) => (super.noSuchMethod(
      Invocation.method(#isLanguageSelected, [languageCode]),
      returnValue: false) as bool);
  @override
  void toggleTranslationKeys() =>
      super.noSuchMethod(Invocation.method(#toggleTranslationKeys, []),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void addListener(_i10.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void registerDispose(_i15.DisposeAware? toDispose) =>
      super.noSuchMethod(Invocation.method(#registerDispose, [toDispose]),
          returnValueForMissingStub: null);
  @override
  void registerDisposeStream<T>(_i8.StreamSubscription<T>? subscription) =>
      super.noSuchMethod(
          Invocation.method(#registerDisposeStream, [subscription]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [LicenseViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockLicenseViewModel extends _i1.Mock implements _i27.LicenseViewModel {
  MockLicenseViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i28.License> get licenses =>
      (super.noSuchMethod(Invocation.getter(#licenses),
          returnValue: <_i28.License>[]) as List<_i28.License>);
  @override
  bool get disposed =>
      (super.noSuchMethod(Invocation.getter(#disposed), returnValue: false)
          as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i8.Future<void> init(_i27.LicenseNavigator? navigator) =>
      (super.noSuchMethod(Invocation.method(#init, [navigator]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void onBackClicked() =>
      super.noSuchMethod(Invocation.method(#onBackClicked, []),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void addListener(_i10.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void registerDispose(_i15.DisposeAware? toDispose) =>
      super.noSuchMethod(Invocation.method(#registerDispose, [toDispose]),
          returnValueForMissingStub: null);
  @override
  void registerDisposeStream<T>(_i8.StreamSubscription<T>? subscription) =>
      super.noSuchMethod(
          Invocation.method(#registerDisposeStream, [subscription]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [LoginViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginViewModel extends _i1.Mock implements _i29.LoginViewModel {
  MockLoginViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoginEnabled => (super
          .noSuchMethod(Invocation.getter(#isLoginEnabled), returnValue: false)
      as bool);
  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);
  @override
  bool get disposed =>
      (super.noSuchMethod(Invocation.getter(#disposed), returnValue: false)
          as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i8.Future<void> init(_i29.LoginNavigator? navigator) =>
      (super.noSuchMethod(Invocation.method(#init, [navigator]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void onEmailUpdated(String? email) =>
      super.noSuchMethod(Invocation.method(#onEmailUpdated, [email]),
          returnValueForMissingStub: null);
  @override
  void onPasswordUpdated(String? password) =>
      super.noSuchMethod(Invocation.method(#onPasswordUpdated, [password]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> onLoginClicked() =>
      (super.noSuchMethod(Invocation.method(#onLoginClicked, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void addListener(_i10.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void registerDispose(_i15.DisposeAware? toDispose) =>
      super.noSuchMethod(Invocation.method(#registerDispose, [toDispose]),
          returnValueForMissingStub: null);
  @override
  void registerDisposeStream<T>(_i8.StreamSubscription<T>? subscription) =>
      super.noSuchMethod(
          Invocation.method(#registerDisposeStream, [subscription]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [SplashViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockSplashViewModel extends _i1.Mock implements _i30.SplashViewModel {
  MockSplashViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get disposed =>
      (super.noSuchMethod(Invocation.getter(#disposed), returnValue: false)
          as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i8.Future<void> init(_i30.SplashNavigator? navigator) =>
      (super.noSuchMethod(Invocation.method(#init, [navigator]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void addListener(_i10.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void registerDispose(_i15.DisposeAware? toDispose) =>
      super.noSuchMethod(Invocation.method(#registerDispose, [toDispose]),
          returnValueForMissingStub: null);
  @override
  void registerDisposeStream<T>(_i8.StreamSubscription<T>? subscription) =>
      super.noSuchMethod(
          Invocation.method(#registerDisposeStream, [subscription]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [TodoAddViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoAddViewModel extends _i1.Mock implements _i31.TodoAddViewModel {
  MockTodoAddViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.TodoRepository get todoRepo =>
      (super.noSuchMethod(Invocation.getter(#todoRepo),
          returnValue: _FakeTodoRepository_12()) as _i5.TodoRepository);
  @override
  bool get isSaveEnabled =>
      (super.noSuchMethod(Invocation.getter(#isSaveEnabled), returnValue: false)
          as bool);
  @override
  bool get disposed =>
      (super.noSuchMethod(Invocation.getter(#disposed), returnValue: false)
          as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i8.Future<void> init(_i31.TodoAddNavigator? navigator) =>
      (super.noSuchMethod(Invocation.method(#init, [navigator]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void onTodoChanged(String? todo) =>
      super.noSuchMethod(Invocation.method(#onTodoChanged, [todo]),
          returnValueForMissingStub: null);
  @override
  void onBackClicked() =>
      super.noSuchMethod(Invocation.method(#onBackClicked, []),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> onSaveClicked() =>
      (super.noSuchMethod(Invocation.method(#onSaveClicked, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void addListener(_i10.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void registerDispose(_i15.DisposeAware? toDispose) =>
      super.noSuchMethod(Invocation.method(#registerDispose, [toDispose]),
          returnValueForMissingStub: null);
  @override
  void registerDisposeStream<T>(_i8.StreamSubscription<T>? subscription) =>
      super.noSuchMethod(
          Invocation.method(#registerDisposeStream, [subscription]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [TodoListViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoListViewModel extends _i1.Mock implements _i32.TodoListViewModel {
  MockTodoListViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);
  @override
  _i8.Stream<List<_i18.Todo>> get dataStream =>
      (super.noSuchMethod(Invocation.getter(#dataStream),
              returnValue: Stream<List<_i18.Todo>>.empty())
          as _i8.Stream<List<_i18.Todo>>);
  @override
  bool get disposed =>
      (super.noSuchMethod(Invocation.getter(#disposed), returnValue: false)
          as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i8.Future<void> init(_i32.TodoListViewNavigator? navigator) =>
      (super.noSuchMethod(Invocation.method(#init, [navigator]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> onDownloadClicked() =>
      (super.noSuchMethod(Invocation.method(#onDownloadClicked, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void onAddClicked() =>
      super.noSuchMethod(Invocation.method(#onAddClicked, []),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> onTodoChanged({int? id, bool? value}) => (super.noSuchMethod(
      Invocation.method(#onTodoChanged, [], {#id: id, #value: value}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void addListener(_i10.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void registerDispose(_i15.DisposeAware? toDispose) =>
      super.noSuchMethod(Invocation.method(#registerDispose, [toDispose]),
          returnValueForMissingStub: null);
  @override
  void registerDisposeStream<T>(_i8.StreamSubscription<T>? subscription) =>
      super.noSuchMethod(
          Invocation.method(#registerDisposeStream, [subscription]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [FirebaseAnalytics].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAnalytics extends _i1.Mock implements _i33.FirebaseAnalytics {
  MockFirebaseAnalytics() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
      returnValue: _FakeFirebaseApp_13()) as _i6.FirebaseApp);
  @override
  set app(_i6.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i8.Future<void> logEvent(
          {String? name,
          Map<String, Object?>? parameters,
          _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logEvent, [], {
            #name: name,
            #parameters: parameters,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setConsent(
          {bool? adStorageConsentGranted,
          bool? analyticsStorageConsentGranted}) =>
      (super.noSuchMethod(
          Invocation.method(#setConsent, [], {
            #adStorageConsentGranted: adStorageConsentGranted,
            #analyticsStorageConsentGranted: analyticsStorageConsentGranted
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setDefaultEventParameters(
          Map<String, Object>? defaultParameters) =>
      (super.noSuchMethod(
          Invocation.method(#setDefaultEventParameters, [defaultParameters]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setAnalyticsCollectionEnabled(bool? enabled) =>
      (super.noSuchMethod(
          Invocation.method(#setAnalyticsCollectionEnabled, [enabled]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setUserId(
          {String? id, _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(
              #setUserId, [], {#id: id, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setCurrentScreen(
          {String? screenName,
          String? screenClassOverride = r'Flutter',
          _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#setCurrentScreen, [], {
            #screenName: screenName,
            #screenClassOverride: screenClassOverride,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setUserProperty(
          {String? name,
          String? value,
          _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#setUserProperty, [],
              {#name: name, #value: value, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> resetAnalyticsData() =>
      (super.noSuchMethod(Invocation.method(#resetAnalyticsData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logAddPaymentInfo(
          {String? coupon,
          String? currency,
          String? paymentType,
          double? value,
          List<_i34.AnalyticsEventItem>? items,
          _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logAddPaymentInfo, [], {
            #coupon: coupon,
            #currency: currency,
            #paymentType: paymentType,
            #value: value,
            #items: items,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logAddShippingInfo(
          {String? coupon,
          String? currency,
          double? value,
          String? shippingTier,
          List<_i34.AnalyticsEventItem>? items,
          _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logAddShippingInfo, [], {
            #coupon: coupon,
            #currency: currency,
            #value: value,
            #shippingTier: shippingTier,
            #items: items,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logAddToCart(
          {List<_i34.AnalyticsEventItem>? items,
          double? value,
          String? currency,
          _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logAddToCart, [], {
            #items: items,
            #value: value,
            #currency: currency,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logAddToWishlist(
          {List<_i34.AnalyticsEventItem>? items,
          double? value,
          String? currency,
          _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logAddToWishlist, [], {
            #items: items,
            #value: value,
            #currency: currency,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logEcommercePurchase(
          {String? currency,
          double? value,
          String? transactionId,
          double? tax,
          double? shipping,
          String? coupon,
          String? location,
          int? numberOfNights,
          int? numberOfRooms,
          int? numberOfPassengers,
          String? origin,
          String? destination,
          String? startDate,
          String? endDate,
          String? travelClass}) =>
      (super.noSuchMethod(
          Invocation.method(#logEcommercePurchase, [], {
            #currency: currency,
            #value: value,
            #transactionId: transactionId,
            #tax: tax,
            #shipping: shipping,
            #coupon: coupon,
            #location: location,
            #numberOfNights: numberOfNights,
            #numberOfRooms: numberOfRooms,
            #numberOfPassengers: numberOfPassengers,
            #origin: origin,
            #destination: destination,
            #startDate: startDate,
            #endDate: endDate,
            #travelClass: travelClass
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logAdImpression(
          {String? adPlatform,
          String? adSource,
          String? adFormat,
          String? adUnitName,
          double? value,
          String? currency,
          _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logAdImpression, [], {
            #adPlatform: adPlatform,
            #adSource: adSource,
            #adFormat: adFormat,
            #adUnitName: adUnitName,
            #value: value,
            #currency: currency,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logAppOpen({_i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logAppOpen, [], {#callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logBeginCheckout(
          {double? value,
          String? currency,
          List<_i34.AnalyticsEventItem>? items,
          String? coupon,
          _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logBeginCheckout, [], {
            #value: value,
            #currency: currency,
            #items: items,
            #coupon: coupon,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logCampaignDetails(
          {String? source,
          String? medium,
          String? campaign,
          String? term,
          String? content,
          String? aclid,
          String? cp1,
          _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logCampaignDetails, [], {
            #source: source,
            #medium: medium,
            #campaign: campaign,
            #term: term,
            #content: content,
            #aclid: aclid,
            #cp1: cp1,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logEarnVirtualCurrency(
          {String? virtualCurrencyName,
          num? value,
          _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logEarnVirtualCurrency, [], {
            #virtualCurrencyName: virtualCurrencyName,
            #value: value,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logPresentOffer(
          {String? itemId,
          String? itemName,
          String? itemCategory,
          int? quantity,
          double? price,
          double? value,
          String? currency,
          String? itemLocationId}) =>
      (super.noSuchMethod(
          Invocation.method(#logPresentOffer, [], {
            #itemId: itemId,
            #itemName: itemName,
            #itemCategory: itemCategory,
            #quantity: quantity,
            #price: price,
            #value: value,
            #currency: currency,
            #itemLocationId: itemLocationId
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logPurchaseRefund(
          {String? currency, double? value, String? transactionId}) =>
      (super.noSuchMethod(
          Invocation.method(#logPurchaseRefund, [], {
            #currency: currency,
            #value: value,
            #transactionId: transactionId
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logGenerateLead(
          {String? currency,
          double? value,
          _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logGenerateLead, [],
              {#currency: currency, #value: value, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logJoinGroup(
          {String? groupId, _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logJoinGroup, [],
              {#groupId: groupId, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logLevelUp(
          {int? level,
          String? character,
          _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logLevelUp, [], {
            #level: level,
            #character: character,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logLevelStart(
          {String? levelName, _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logLevelStart, [],
              {#levelName: levelName, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logLevelEnd(
          {String? levelName,
          int? success,
          _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logLevelEnd, [], {
            #levelName: levelName,
            #success: success,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logSetCheckoutOption(
          {int? checkoutStep, String? checkoutOption}) =>
      (super.noSuchMethod(
          Invocation.method(#logSetCheckoutOption, [],
              {#checkoutStep: checkoutStep, #checkoutOption: checkoutOption}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logLogin(
          {String? loginMethod, _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logLogin, [],
              {#loginMethod: loginMethod, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logPostScore(
          {int? score,
          int? level,
          String? character,
          _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logPostScore, [], {
            #score: score,
            #level: level,
            #character: character,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logPurchase(
          {String? currency,
          String? coupon,
          double? value,
          List<_i34.AnalyticsEventItem>? items,
          double? tax,
          double? shipping,
          String? transactionId,
          String? affiliation,
          _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logPurchase, [], {
            #currency: currency,
            #coupon: coupon,
            #value: value,
            #items: items,
            #tax: tax,
            #shipping: shipping,
            #transactionId: transactionId,
            #affiliation: affiliation,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logRemoveFromCart(
          {String? currency,
          double? value,
          List<_i34.AnalyticsEventItem>? items,
          _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logRemoveFromCart, [], {
            #currency: currency,
            #value: value,
            #items: items,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logScreenView(
          {String? screenClass,
          String? screenName,
          _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logScreenView, [], {
            #screenClass: screenClass,
            #screenName: screenName,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logSelectItem(
          {String? itemListId,
          String? itemListName,
          List<_i34.AnalyticsEventItem>? items,
          _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logSelectItem, [], {
            #itemListId: itemListId,
            #itemListName: itemListName,
            #items: items,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logSelectPromotion(
          {String? creativeName,
          String? creativeSlot,
          List<_i34.AnalyticsEventItem>? items,
          String? locationId,
          String? promotionId,
          String? promotionName,
          _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logSelectPromotion, [], {
            #creativeName: creativeName,
            #creativeSlot: creativeSlot,
            #items: items,
            #locationId: locationId,
            #promotionId: promotionId,
            #promotionName: promotionName,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logViewCart(
          {String? currency,
          double? value,
          List<_i34.AnalyticsEventItem>? items,
          _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logViewCart, [], {
            #currency: currency,
            #value: value,
            #items: items,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logSearch(
          {String? searchTerm,
          int? numberOfNights,
          int? numberOfRooms,
          int? numberOfPassengers,
          String? origin,
          String? destination,
          String? startDate,
          String? endDate,
          String? travelClass,
          _i34.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logSearch, [], {
            #searchTerm: searchTerm,
            #numberOfNights: numberOfNights,
            #numberOfRooms: numberOfRooms,
            #numberOfPassengers: numberOfPassengers,
            #origin: origin,
            #destination: destination,
            #startDate: startDate,
            #endDate: endDate,
            #travelClass: travelClass,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logSelectContent({String? contentType, String? itemId}) =>
      (super.noSuchMethod(
          Invocation.method(#logSelectContent, [],
              {#contentType: contentType, #itemId: itemId}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logShare(
          {String? contentType, String? itemId, String? method}) =>
      (super.noSuchMethod(
          Invocation.method(#logShare, [],
              {#contentType: contentType, #itemId: itemId, #method: method}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logSignUp({String? signUpMethod}) => (super.noSuchMethod(
      Invocation.method(#logSignUp, [], {#signUpMethod: signUpMethod}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logSpendVirtualCurrency(
          {String? itemName, String? virtualCurrencyName, num? value}) =>
      (super.noSuchMethod(
          Invocation.method(#logSpendVirtualCurrency, [], {
            #itemName: itemName,
            #virtualCurrencyName: virtualCurrencyName,
            #value: value
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logTutorialBegin() =>
      (super.noSuchMethod(Invocation.method(#logTutorialBegin, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logTutorialComplete() =>
      (super.noSuchMethod(Invocation.method(#logTutorialComplete, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logUnlockAchievement({String? id}) => (super.noSuchMethod(
      Invocation.method(#logUnlockAchievement, [], {#id: id}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logViewItem(
          {String? currency,
          double? value,
          List<_i34.AnalyticsEventItem>? items}) =>
      (super.noSuchMethod(
          Invocation.method(#logViewItem, [],
              {#currency: currency, #value: value, #items: items}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logViewItemList(
          {List<_i34.AnalyticsEventItem>? items,
          String? itemListId,
          String? itemListName}) =>
      (super.noSuchMethod(
          Invocation.method(#logViewItemList, [], {
            #items: items,
            #itemListId: itemListId,
            #itemListName: itemListName
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logViewPromotion(
          {String? creativeName,
          String? creativeSlot,
          List<_i34.AnalyticsEventItem>? items,
          String? locationId,
          String? promotionId,
          String? promotionName}) =>
      (super.noSuchMethod(
          Invocation.method(#logViewPromotion, [], {
            #creativeName: creativeName,
            #creativeSlot: creativeSlot,
            #items: items,
            #locationId: locationId,
            #promotionId: promotionId,
            #promotionName: promotionName
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logViewSearchResults({String? searchTerm}) =>
      (super.noSuchMethod(
          Invocation.method(
              #logViewSearchResults, [], {#searchTerm: searchTerm}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logRefund(
          {String? currency,
          String? coupon,
          double? value,
          double? tax,
          double? shipping,
          String? transactionId,
          String? affiliation,
          List<_i34.AnalyticsEventItem>? items}) =>
      (super.noSuchMethod(
          Invocation.method(#logRefund, [], {
            #currency: currency,
            #coupon: coupon,
            #value: value,
            #tax: tax,
            #shipping: shipping,
            #transactionId: transactionId,
            #affiliation: affiliation,
            #items: items
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setSessionTimeoutDuration(Duration? timeout) => (super
      .noSuchMethod(Invocation.method(#setSessionTimeoutDuration, [timeout]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [MainNavigation].
///
/// See the documentation for Mockito's code generation for more information.
class MockMainNavigation extends _i1.Mock implements _i35.MainNavigation {
  @override
  void goToSplash() => super.noSuchMethod(Invocation.method(#goToSplash, []),
      returnValueForMissingStub: null);
  @override
  void goToLogin() => super.noSuchMethod(Invocation.method(#goToLogin, []),
      returnValueForMissingStub: null);
  @override
  void goToHome() => super.noSuchMethod(Invocation.method(#goToHome, []),
      returnValueForMissingStub: null);
  @override
  void goToAddTodo() => super.noSuchMethod(Invocation.method(#goToAddTodo, []),
      returnValueForMissingStub: null);
  @override
  void goToDebugPlatformSelector() =>
      super.noSuchMethod(Invocation.method(#goToDebugPlatformSelector, []),
          returnValueForMissingStub: null);
  @override
  void goToThemeModeSelector() =>
      super.noSuchMethod(Invocation.method(#goToThemeModeSelector, []),
          returnValueForMissingStub: null);
  @override
  void goToDebug() => super.noSuchMethod(Invocation.method(#goToDebug, []),
      returnValueForMissingStub: null);
  @override
  void goToLicense() => super.noSuchMethod(Invocation.method(#goToLicense, []),
      returnValueForMissingStub: null);
  @override
  void closeDialog() => super.noSuchMethod(Invocation.method(#closeDialog, []),
      returnValueForMissingStub: null);
  @override
  void goToDatabase(_i36.GeneratedDatabase? db) =>
      super.noSuchMethod(Invocation.method(#goToDatabase, [db]),
          returnValueForMissingStub: null);
  @override
  void goBack<T>({T? result}) =>
      super.noSuchMethod(Invocation.method(#goBack, [], {#result: result}),
          returnValueForMissingStub: null);
  @override
  void showCustomDialog<T>({_i17.WidgetBuilder? builder}) => super.noSuchMethod(
      Invocation.method(#showCustomDialog, [], {#builder: builder}),
      returnValueForMissingStub: null);
}
