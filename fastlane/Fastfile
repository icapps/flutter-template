fastlane_version “2.93.1”

# Don't generate README files.
skip_docs

# Install provisioning pro
install_provisioning_profiles

# Make sure all changes are committed.
before_all do |lane|
 clean_build_artifacts
end

keychain_password = ENV[‘JENKINS_KEYCHAIN_PASSWORD’]
unlock_keychain(path: ‘login.keychain’, password: keychain_password) if is_ci? && keychain_password
appcenter_app_name = ''

#####################
### CONFIGURATION ###
#####################

# Flutter configuration.
FLUTTER_VERSION = '' # Configure if you want to use a specific version.

# AppCenter configuration.
WORKSPACE = 'ios/Runner.xcworkspace'
BUILD_NR = ENV["BUILD_NUMBER"]

####################
### PUBLIC LANES ###
####################
lane :pr do
  Dir.chdir ".." do
    sh("flutter", "analyze")
    sh("flutter", "test")
    #sh("flutter", "test", "--coverage")
    #sh("dart", "--version")
    #sh("dart", "coverage/filter_test_coverage.dart")
    #sh("python3", "coverage/lcov_cobertura.py", "coverage/lcov.info", "--output", "coverage/coverage.xml")
  end
end

lane :ci_alpha do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.

  ensureFlutterVersion # Make sure Flutter is using the right version to build this project

  prepareBuild()

  buildAppAndroid(flavor: 'alpha')
  upload_to_appcenter_android(flavor: 'alpha') # Deploy the apk to AppCenter.

  buildAppIOS(flavor: 'alpha')
  upload_to_appcenter_ios(flavor: 'alpha') # Deploy the apk to AppCenter.
end

lane :ci_beta do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.

  ensureFlutterVersion # Make sure Flutter is using the right version to build this project

  prepareBuild()

  buildAppAndroid(flavor: 'beta')
  upload_to_appcenter_android(flavor: 'beta') # Deploy the apk to AppCenter.

  buildAppIOS(flavor: 'beta')
  upload_to_appcenter_ios(flavor: 'beta') # Deploy the apk to AppCenter.
end

lane :alpha_android do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.

  ensureFlutterVersion # Make sure Flutter is using the right version to build this project

  prepareBuild()
  buildAppAndroid(flavor: 'alpha')
  upload_to_appcenter_android(flavor: 'alpha') # Deploy the apk to AppCenter.
end

lane :beta_android do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.

  ensureFlutterVersion # Make sure Flutter is using the right version to build this project

  prepareBuild()
  buildAppAndroid(flavor: 'beta')
  upload_to_appcenter_android(flavor: 'beta') # Deploy the apk to AppCenter.
end

lane :prod_android do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.

  ensureFlutterVersion # Make sure Flutter is using the right version to build this project

  prepareBuild()
  buildAppAndroid(flavor: 'prod')
  add_tag                 # Add tag
end

lane :alpha_ios do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.

  ensureFlutterVersion # Make sure Flutter is using the right version to build this project

  prepareBuild()
  buildAppIOS(flavor: 'alpha')
  upload_to_appcenter_ios(flavor: 'alpha') # Deploy the apk to AppCenter.
end

lane :beta_ios do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.

  ensureFlutterVersion # Make sure Flutter is using the right version to build this project

  prepareBuild()
  buildAppIOS(flavor: 'beta')
  upload_to_appcenter_ios(flavor: 'beta') # Deploy the apk to AppCenter.
end

lane :prod_ios do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.

  ensureFlutterVersion # Make sure Flutter is using the right version to build this project

  prepareBuild()
  buildAppIOS(flavor: 'prod')
  add_tag                 # Add tag
end

########################
###   PRIVATE LANES  ###
########################

private_lane :ensureFlutterVersion do
    if FLUTTER_VERSION == "" &&
       sh("echo", "Flutter will use the latest version")
    else
       sh("flutter", "version", FLUTTER_VERSION)
    end
end

private_lane :prepareBuild do
    Dir.chdir ".." do
      sh("flutter", "packages", "get")
      sh("flutter", "clean")
    end
end

private_lane :buildAppAndroid do |options|
    Dir.chdir ".." do
      sh("flutter", "build", "apk", "--release", "--flavor", options[:flavor], "-t" "lib/main_#{options[:flavor]}.dart", "--build-number=#{BUILD_NR}")    # Build the application
    end
end

private_lane :buildAppIOS do |options|
    Dir.chdir ".." do
      sh("flutter", "build", "ios", "--release", "--flavor", options[:flavor], "-t" "lib/main_#{options[:flavor]}.dart", "--no-codesign", "--build-number=#{BUILD_NR}")    # Build the application
      convertAppToIpa(flavor: options[:flavor])
    end
end

private_lane :convertAppToIpa do |options|
     Dir.chdir "ios" do
        gym(
            workspace: WORKSPACE,
            scheme: options[:flavor],
            configuration: "Release-#{options[:flavor]}",
            export_options: {
                method: "enterprise",
                provisioningProfiles: {
                    "com.icapps.fluttertemplate.dev" => "Flutter Template Debug",
                    "com.icapps.fluttertemplate.alpha" => "Flutter Template Alpha",
                    "com.icapps.fluttertemplate.beta" => "Flutter Template Beta",
                    "com.icapps.fluttertemplate" => "Flutter Template Production"
                }
            }
        )
    end
end

private_lane :upload_to_appcenter_android do |options|
  getAppNameAndroid(flavor: options[:flavor])
  appcenter_upload(
    app_name: appcenter_app_name,
    apk: "./build/app/outputs/apk/#{options[:flavor]}/release/app-#{options[:flavor]}-release.apk",
    notify_testers: true
  )
end

private_lane :upload_to_appcenter_ios do |options|
  getAppNameIOS(flavor: options[:flavor])
  appcenter_upload(
    app_name: appcenter_app_name,
    notify_testers: true
  )
end

private_lane :add_tag do
  add_git_tag(build_number: BUILD_NR)
end

private_lane :getAppNameAndroid do |options|
    flavor = options[:flavor]
    if flavor == "alpha" &&
        appcenter_app_name = "FlutterTemplate-Android-Alpha"
    elsif flavor == "beta"
        appcenter_app_name = "FlutterTemplate-Android-Beta"
    elsif flavor == "prod"
        appcenter_app_name = "FlutterTemplate-Android"
    end
end


private_lane :getAppNameIOS do |options|
    flavor = options[:flavor]
    if flavor == "alpha" &&
        appcenter_app_name = "FlutterTemplate-iOS-Alpha"
    elsif flavor == "beta"
        appcenter_app_name = "FlutterTemplate-iOS-Beta"
    elsif flavor == "prod"
        appcenter_app_name = "FlutterTemplate-iOS"
    end
end