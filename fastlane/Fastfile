fastlane_version “2.195.0”

# Don't generate README files.
skip_docs

# Select specific xcode
xcode_path = ""
if is_ci
  #xcode_select(xcode_path)
end

# Install provisioning pro
install_provisioning_profiles

# Make sure all changes are committed.
before_all do |lane|
 clean_build_artifacts
end

keychain_password = ENV[‘JENKINS_KEYCHAIN_PASSWORD’]
unlock_keychain(path: ‘login.keychain’, password: keychain_password) if is_ci? && keychain_password

#####################
### CONFIGURATION ###
#####################
# AppStore Configuration
APP_STORE_USERNAME = ''
APP_STORE_TEAM_NAME = ''
APP_STORE_TEAM_ID = ''

# iOS Configuration
WORKSPACE = 'ios/Runner.xcworkspace'

#Build Configuration
BUMP_BUILD_NR = 10
BUILD_NR = ENV["BUILD_NUMBER"] || ''

if BUILD_NR == ''
  BUILD_NR = 1
  sh("echo","No build nr set, USING DEFAULT (1)")
else
  BUILD_NR = Integer(BUILD_NR) + BUMP_BUILD_NR
  sh("echo","New build nr: #{BUILD_NR}")
end

####################
### PUBLIC LANES ###
####################
lane :pr do
  installFvmVersion
  checkCompilationAndAnalyzer
  Dir.chdir ".." do
    sh("fvm", "flutter", "test")
    #sh("fvm", "flutter", "test", "--coverage")
    #sh("dart", "--version")
    #sh("dart", "coverage/filter_test_coverage.dart")
    #sh("python3", "coverage/lcov_cobertura.py", "coverage/lcov.info", "--output", "coverage/coverage.xml")
  end
  git_reset
end

lane :ci_alpha do
    ensure_git_status_clean
    pr
    git_reset
    alpha_android
    alpha_ios_build
    git_reset
end

lane :ci_beta do
    ensure_git_status_clean
    pr
    git_reset
    beta_android
    beta_ios_build
    git_reset
end

lane :ci_prod do
    ensure_git_status_clean
    pr
    git_reset
    prod_android
    prod_ios_build
    git_reset
end

lane :alpha_android do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  installFvmVersion

  prepareBuild
  buildAppAndroid(flavor: 'alpha')
  uploadToFirebase(app: "{appId}", android_path: "build/app/outputs/apk/alpha/release/app-alpha-release.apk")
  git_reset
end

lane :beta_android do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  installFvmVersion

  prepareBuild
  uploadToFirebase(app: "{appId}", android_path: "build/app/outputs/apk/beta/release/app-beta-release.apk")
  git_reset
end

lane :prod_android do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  installFvmVersion

  prepareBuild
  buildAppBundleAndroid(flavor: 'prod')
  sh("echo","Uploading to Google Play is disabled.")
  #deployToPlayStore(flavor: 'prod', package_name: 'com.icapps.fluttertemplate')
  add_tag                 # Add tag
  git_reset
end

lane :alpha_ios do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  installFvmVersion

  prepareBuild
  alpha_ios_build
  git_reset
end

lane :beta_ios do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  installFvmVersion

  prepareBuild
  beta_ios_build
  git_reset
end

lane :prod_ios do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  installFvmVersion

  prepareBuild
  prod_ios_build
  add_tag                 # Add tag
  git_reset
end

########################
###   PRIVATE LANES  ###
########################

private_lane :alpha_ios_build do
  buildAppIOSOnly(flavor: 'alpha')
  uploadToFirebase(app: "{appId}")
end

private_lane :beta_ios_build do
  buildAppIOSOnly(flavor: 'beta')
  uploadToFirebase(app: "{appid}")
end

private_lane :prod_ios_build do
  buildAppIOSOnly(flavor: 'prod')
  sh("echo","Enter `apple_id` in the prod_ios_build lane")
  #buildAndDeployToAppStore(flavor: 'prod', configuration: 'Release-prod', identifier: 'com.icapps.fluttertemplate', apple_id: '')
end

## The analysis_options_all_files is used to check that all files can compile. even the once ignored in the original analysis_options.yaml
## We first check for full compilation. After that we check the rules of the original analysis_options.yaml
private_lane :checkCompilationAndAnalyzer do
    Dir.chdir ".." do
      sh("mv", "analysis_options.yaml", "fastlane/analysis_options_original.yaml")
      sh("cp", "fastlane/analysis_options_check_compilation.yaml", "analysis_options.yaml")
      sh("fvm", "flutter", "analyze")
      sh("mv", "fastlane/analysis_options_original.yaml", "analysis_options.yaml")
      sh("fvm", "flutter", "analyze")
    end
end
private_lane :installFvmVersion do
    Dir.chdir ".." do
      sh("bash", "./tool/install_fvm.sh")
    end
end

private_lane :prepareBuild do
    Dir.chdir ".." do
      sh("fvm", "flutter", "packages", "get")
      sh("fvm", "flutter", "clean")
    end
end

private_lane :buildAppAndroid do |options|
    Dir.chdir ".." do
      sh("fvm", "flutter", "build", "apk", "--release", "--flavor", options[:flavor], "-t" "lib/main_#{options[:flavor]}.dart", "--obfuscate", "--split-debug-info=./build/debug-info/#{options[:flavor]}", "--build-number=#{BUILD_NR}")    # Build the application (APK)
    end
    upload_artifacts_to_s3(flavor: options[:flavor])
end

private_lane :buildAppBundleAndroid do |options|
    Dir.chdir ".." do
      sh("fvm", "flutter", "build", "appbundle", "--release", "--flavor", options[:flavor], "-t" "lib/main_#{options[:flavor]}.dart", "--obfuscate", "--split-debug-info=./build/debug-info/#{options[:flavor]}", "--build-number=#{BUILD_NR}")    # Build the application (AAB)
    end
    upload_artifacts_to_s3(flavor: options[:flavor])
end

private_lane :buildAppIOSOnly do |options|
    Dir.chdir ".." do
      podRepoUpdate
      sh("fvm", "flutter", "build", "ipa", "--release", "--flavor", options[:flavor], "-t" "lib/main_#{options[:flavor]}.dart", "--no-codesign", "--obfuscate", "--split-debug-info=./build/debug-info/#{options[:flavor]}", "--build-number=#{BUILD_NR}", "--export-options-plist ios/Runner/ExportOptions.plist")    # Build the application
    end
    Dir.chdir "../build" do
      zip(
        path: "./",
        include: ["**/debug-info/#{options[:flavor]}/app.ios-*", "**/ios/Release-#{options[:flavor]}-iphoneos/Runner.app.dSYM/*"],
        output_path: "iOSSymbols.zip"
      )
    end
    upload_artifacts_to_s3(flavor: options[:flavor])
end

private_lane :podRepoUpdate do |options|
      Dir.chdir "ios" do
        sh("pod", "repo", "update")
      end
end

private_lane :convertAppToIpa do |options|
     Dir.chdir "ios" do
        gym(
            workspace: WORKSPACE,
            scheme: options[:flavor],
            configuration: "Release-#{options[:flavor]}",
            export_options: {
                method: "enterprise",
                provisioningProfiles: {
                    "com.icapps.fluttertemplate.dev" => "Flutter Template Debug",
                    "com.icapps.fluttertemplate.alpha" => "Flutter Template Alpha",
                    "com.icapps.fluttertemplate.beta" => "Flutter Template Beta",
                    "com.icapps.fluttertemplate" => "Flutter Template Production"
                }
            }
        )
    end
end

private_lane :uploadToFirebase do |options|
  firebase_app_distribution(
    android_artifact_type: "APK",
    android_artifact_path: options[:android_path],
    app: options[:app],
    testers_file: "fastlane/firebase_distribution/testers.txt",
    release_notes_file: "fastlane/firebase_distribution/release-notes.txt",
    service_credentials_file: "fastlane/firebase_distribution/credentials.json"
  )
end

private_lane :add_tag do
  add_git_tag(build_number: BUILD_NR)
end

private_lane :git_reset do
  sh("git", "reset", "--hard")
end

private_lane :buildAndDeployToAppStore do |options|
  buildIosAppStore options
  deployToAppStore options
end

private_lane :buildIosAppStore do |options|
    gym(
      workspace:     WORKSPACE,
      scheme:        options[:flavor],
      configuration: options[:configuration],
      clean:         true,
      export_options: {
        method: 'app-store',
        provisioningProfiles: {
            "com.icapps.fluttertemplate.dev" => "Flutter Template Debug",
            "com.icapps.fluttertemplate.alpha" => "Flutter Template Alpha",
            "com.icapps.fluttertemplate.beta" => "Flutter Template Beta",
            "com.icapps.fluttertemplate" => "Flutter Template Production"
        }
      }
    )
end

private_lane :deployToAppStore do |options|
  pilot(
    username:                          APP_STORE_USERNAME,
    team_name:                         APP_STORE_TEAM_NAME,
    team_id:                           APP_STORE_TEAM_ID,
    app_identifier:                    options[:identifier],
    apple_id:                          options[:apple_id],
    skip_submission:                   true,
    skip_waiting_for_build_processing: true,
  )
  uploadIOSSymbols(flavor: options[:flavor])
end

private_lane :deployToPlayStore do |options|
  upload_to_play_store(
    package_name: options[:package_name],
    track: 'internal',
    release_status: 'draft', #completed
    aab: "./build/app/outputs/bundle/#{options[:flavor]}Release/app-#{options[:flavor]}-release.aab",
    json_key: 'google_playstore_api.json'
  )
  uploadAndroidSymbols(flavor: options[:flavor])
end

private_lane :uploadIOSSymbols do |options|
   Dir.chdir ".." do
     sh("dart", "run", "./tool/dart_tool/firebase/firebase_uploader.dart", "ios", "#{options[:flavor]}")
   end
end

private_lane :uploadAndroidSymbols do |options|
   Dir.chdir ".." do
     sh("dart", "run", "./tool/dart_tool/firebase/firebase_uploader.dart", "android", "#{options[:flavor]}", "build/debug-info/#{options[:flavor]}")
   end
end

private_lane :upload_artifacts_to_s3 do |options|
  Dir.chdir "../tool/s3/dart_s3_executor/" do
      sh("./tool/packages_get.sh")
  end
  sh("fvm", "dart", "run", "../tool/s3/dart_s3_executor/bin/main.dart", "#{BUILD_NR}", options[:flavor], "../tool/s3/s3.sh", "fluttertemplate")
end
